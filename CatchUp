import java.util.*;


/**
 * catch up and win
 **/
class Player {
    static Maze m = new Maze();
    public static void main(String args[]) {



        char[][] grid = new char[10][10];

        Scanner in = new Scanner(System.in);

        if ( in .hasNextLine()) { in .nextLine();

        }
        for (int i = 0; i < 10; i++) {
            String s = in .nextLine(); // the map


            for (int b = 0; b < s.length(); b++) {


                grid[i][b] = s.charAt(b);
                if (grid[i][b] == 'P') {
                    m.source.row = i;
                    m.source.col = b;
                }



            }



        }

        m.grid = grid;

        // game loop
        while (true) {
            int eneY = in .nextInt(); // the sus man's coordinate,two integers separated by space in a single line
            int eneX = in .nextInt(); // the sus man's coordinate,two integers separated by space in a single line



            if (m.eneX != eneX || m.eneY != eneY) {
                System.err.println(" KOORD " + eneY + " e " + eneX);
                m.eneX = eneX;
                m.eneY = eneY;

                m.minDistance();


            }


            Character pozicija = m.sledeciKoraci.get(0);
            m.sledeciKoraci.remove(0);

            switch (pozicija) {

                case 'U':
                    m.source.row -= 1;

                    break;
                case 'D':
                    m.source.row += 1;
                    break;
                case 'L':
                    m.source.col -= 1;
                    break;
                case 'R':
                    m.source.col += 1;
                    break;
            }

            System.out.println(pozicija);




        }


    }
}

//Location je klasa za poziciju, i pamcenje prethodnih cvorova za BFS rekonstrukciju puta

class Location {
    int row;
    int col;

    List < Character > currentPath = new ArrayList < > (); //Pamti trenutni put do ovog ƒçvora



    public Location(int row, int col) {

        this.row = row;
        this.col = col;



    }

    public Location(int row, int col, List < Character > currentPath) {

        this.currentPath = currentPath;

        this.row = row;
        this.col = col;

    }


}

class Maze {

    char[][] grid;
    int eneX = -1;
    int eneY = -1;
    List < Character > sledeciKoraci;
    Location source = new Location(99999, 9999);
    Queue < Location > queue;
    boolean[][] visited;
    boolean reverse = false; //obrcemo redosled provere polja, kako ne bi smo zauvek jurili AI u krug

    public int minDistance() {



        sledeciKoraci = new ArrayList < > ();

        visited = new boolean[grid.length][grid[0].length]; //svaki put osvezavamo niz posecenih polja


        visited[source.row][source.col] = true; // obelezavamo mesto gde se nalazimo kao poseceno

        // zapocinjemo BFS od cvora 'P'
        queue = new LinkedList < > ();
        queue.add(new Location(source.row, source.col));



        while (queue.isEmpty() == false) {


            Location p = queue.remove();



            explore(p.row, p.col, p.currentPath);

            // neprijatelj pronadjen
            if (p.row == eneY && p.col == eneX) {

                System.err.println(Arrays.deepToString(this.grid));


                sledeciKoraci = p.currentPath;


                return 1;
            }
        }


        return -1;
    }

    // provera da li je polje zid ili van granica
    private boolean isValid(int x, int y,

        boolean[][] visited) {
        if (x >= 0 && y >= 0 && x < grid.length &&
            y < grid[0].length && grid[x][y] != '*' &&
            visited[x][y] == false) {
            return true;
        }

        return false;
    }


    public void obrisiPozicijuE(int x, int y) {
        this.grid[x][y] = '-';
    }


    public void explore(int row, int col, List < Character > currentPath) {


        // U, D, L, R
        List < Location > movements = Arrays.asList(new Location(row - 1, col), new Location(row + 1, col), new Location(row, col - 1), new Location(row, col + 1));
        List < Character > komande = Arrays.asList('U', 'D', 'L', 'R');


        if (reverse) {
            Collections.reverse(movements);
            Collections.reverse(komande);
        }
        for (int i = 0; i < movements.size(); i++) {



            int rowPomeren = movements.get(i).row;
            int colPomeren = movements.get(i).col;
            char slovo = komande.get(i);

            if (isValid(rowPomeren, colPomeren, visited)) {


                List < Character > temp = new ArrayList < Character > (currentPath);
                temp.add(slovo);
                queue.add(new Location(rowPomeren, colPomeren,
                    temp));
                visited[rowPomeren][colPomeren] = true;
            }



        }
        reverse = !reverse;


    }
}
